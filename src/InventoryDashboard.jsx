import React, { useState, useEffect } from "react";
import axios from "axios";
import "./expense.css";

const API_BASE = "http://localhost:5000"; // Flask backend

function ExpenseTracker() {
  const [transactions, setTransactions] = useState([]);
  const [summary, setSummary] = useState({
    total_income: 0,
    total_expense: 0,
    balance: 0,
  });

  const [form, setForm] = useState({
    date: "",
    type: "",
    category: "",
    amount: "",
    note: "",
  });

  const [view, setView] = useState("all"); // all | income | expense
  const [filter, setFilter] = useState({
    startDate: "",
    endDate: "",
    sort: "latest", // latest | oldest | high | low
  });

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å backend
  const fetchData = () => {
    axios
      .get(`${API_BASE}/transactions`)
      .then((res) => setTransactions(res.data))
      .catch((err) => console.error(err));

    axios
      .get(`${API_BASE}/summary`)
      .then((res) => setSummary(res.data))
      .catch((err) => console.error(err));
  };

  useEffect(() => {
    fetchData();
  }, []);

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° transaction
  const addTransaction = (e) => {
    e.preventDefault();
    if (!form.date || !form.type || !form.category || !form.amount) {
      alert("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö");
      return;
    }

    axios
      .post(`${API_BASE}/transactions`, form)
      .then(() => {
        setForm({ date: "", type: "", category: "", amount: "", note: "" });
        fetchData();
      })
      .catch((err) => console.error(err));
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô filter + sort
  const getFilteredTransactions = () => {
    return transactions
      .filter((t) => {
        if (filter.startDate && new Date(t.date) < new Date(filter.startDate))
          return false;
        if (filter.endDate && new Date(t.date) > new Date(filter.endDate))
          return false;
        return true;
      })
      .sort((a, b) => {
        if (filter.sort === "latest") return new Date(b.date) - new Date(a.date);
        if (filter.sort === "oldest") return new Date(a.date) - new Date(b.date);
        if (filter.sort === "high") return b.amount - a.amount;
        if (filter.sort === "low") return a.amount - b.amount;
        return 0;
      })
      .filter((t) => view === "all" || t.type === view);
  };

  return (
    <div className="container">
      <h2>üí∞ Expense Tracker</h2>

      {/* ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ */}
      <form onSubmit={addTransaction} className="form">
        <input
          type="date"
          value={form.date}
          onChange={(e) => setForm({ ...form, date: e.target.value })}
        />

        <select
          value={form.type}
          onChange={(e) => setForm({ ...form, type: e.target.value })}
        >
          <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</option>
          <option value="income">‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö</option>
          <option value="expense">‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢</option>
        </select>

        <select
          value={form.category}
          onChange={(e) => setForm({ ...form, category: e.target.value })}
        >
          <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</option>
          <option value="‡∏≠‡∏≤‡∏´‡∏≤‡∏£">‡∏≠‡∏≤‡∏´‡∏≤‡∏£</option>
          <option value="‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á">‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á</option>
          <option value="‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å">‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å</option>
          <option value="‡∏ö‡∏±‡∏ô‡πÄ‡∏ó‡∏¥‡∏á">‡∏ö‡∏±‡∏ô‡πÄ‡∏ó‡∏¥‡∏á</option>
          <option value="‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û">‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û</option>
          <option value="‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤">‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤</option>
          <option value="‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ">‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ</option>
          <option value="‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤">‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤</option>
          <option value="‡∏á‡∏≤‡∏ô‡∏≠‡∏î‡∏¥‡πÄ‡∏£‡∏Å">‡∏á‡∏≤‡∏ô‡∏≠‡∏î‡∏¥‡πÄ‡∏£‡∏Å</option>
          <option value="‡∏≠‡∏∑‡πà‡∏ô‡πÜ">‡∏≠‡∏∑‡πà‡∏ô‡πÜ</option>
        </select>

        <input
          type="number"
          placeholder="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô"
          value={form.amount}
          onChange={(e) => setForm({ ...form, amount: e.target.value })}
        />

        <input
          type="text"
          placeholder="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"
          value={form.note}
          onChange={(e) => setForm({ ...form, note: e.target.value })}
        />

        <button type="submit">‡πÄ‡∏û‡∏¥‡πà‡∏°</button>
      </form>

      {/* Dashboard */}
      <div className="dashboard">
        <h3>üìä Dashboard</h3>
        <div className="dashboard-cards">
          <div className="card income">
            <h4>‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡∏£‡∏ß‡∏°</h4>
            <p>{summary.total_income} ‡∏ö‡∏≤‡∏ó</p>
          </div>
          <div className="card expense">
            <h4>‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏£‡∏ß‡∏°</h4>
            <p>{summary.total_expense} ‡∏ö‡∏≤‡∏ó</p>
          </div>
          <div className="card balance">
            <h4>‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠</h4>
            <p>{summary.balance} ‡∏ö‡∏≤‡∏ó</p>
          </div>
        </div>

        {/* Toggle */}
        <div className="view-toggle">
          <button
            className={view === "all" ? "active" : ""}
            onClick={() => setView("all")}
          >
            ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
          </button>
          <button
            className={view === "income" ? "active" : ""}
            onClick={() => setView("income")}
          >
            ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö
          </button>
          <button
            className={view === "expense" ? "active" : ""}
            onClick={() => setView("expense")}
          >
            ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢
          </button>
        </div>
      </div>

      {/* Filter & Sort */}
      <div className="filters">
        <label>‡∏à‡∏≤‡∏Å: </label>
        <input
          type="date"
          value={filter.startDate}
          onChange={(e) => setFilter({ ...filter, startDate: e.target.value })}
        />
        <label>‡∏ñ‡∏∂‡∏á: </label>
        <input
          type="date"
          value={filter.endDate}
          onChange={(e) => setFilter({ ...filter, endDate: e.target.value })}
        />

        <select
          value={filter.sort}
          onChange={(e) => setFilter({ ...filter, sort: e.target.value })}
        >
          <option value="latest">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà‡∏™‡∏∏‡∏î</option>
          <option value="oldest">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏∏‡∏î</option>
          <option value="high">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î</option>
          <option value="low">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡∏™‡∏∏‡∏î</option>
        </select>
      </div>

      {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ */}
      <table>
        <thead>
          <tr>
            <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th>
            <th>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</th>
            <th>‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</th>
            <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô</th>
            <th>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</th>
          </tr>
        </thead>
        <tbody>
          {getFilteredTransactions().map((t) => (
            <tr key={t.id}>
              <td>{t.date}</td>
              <td>{t.type === "income" ? "‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö" : "‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢"}</td>
              <td>{t.category}</td>
              <td>{t.amount}</td>
              <td>{t.note}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

export default ExpenseTracker;
